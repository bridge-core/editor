{
	"$schema": "http://json-schema.org/draft-07/schema",
	"properties": {
		"minecraft:aggregate_feature": {
			"description": "Places a collection of features in an arbitary order. All features in the collection use the same input position. Features should not depend on each other, as there is no guarantee on the order the features will be placed.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"early_out": {
					"description": "Do not continue placing features once either the first success or first failure has occurred.",
					"$ref": "../general.json#/definitions/early_outs"
				},
				"features": {
					"description": "Collection of features to be placed one by one. No guarantee of order. All features use the same input position.",
					"type": "array",
					"items": {
						"$ref": "../../general/reference/feature.json"
					}
				}
			}
		},
		"minecraft:sequence_feature": {
			"description": "Places a collection of features sequentially, in the order they appear in data. The output position of the previous feature is used as the input position for the next. For example, a tree feature is placed at (0, 0, 0) and places blocks up to (0, 10, 0). The next feature in the sequence begins at (0, 10, 0).",
			"additionalProperties": false,
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"features": {
					"description": "List of features to be placed in sequence. The output position of the previous feature is used as the input position to the next.",
					"type": "array",
					"items": {
						"$ref": "../../general/reference/feature.json"
					}
				}
			}
		},
		"minecraft:ore_feature": {
			"description": "Places a vein of blocks to simulate ore deposits. Despite the name, any block can be placed by this feature. During placement, existing world blocks are checked to see if they can be replaced by the new ore block based on the list provided in the 'may_replace' field. If no 'may_replace' field is specified, the ore block can replace any existing block.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"count": {
					"description": "The number of blocks to be placed.",
					"type": "number"
				},
				"places_block": {
					"description": "Reference to the block to be placed.",
					"$ref": "../general.json#/definitions/block_reference"
				},
				"may_replace": {
					"description": "A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.",
					"type": "array",
					"items": {
						"$ref": "../general.json#/definitions/block_reference"
					}
				}
			}
		},
		"minecraft:scatter_feature": {
			"description": "Scatters a feature throughout a chunk. The 'x', 'y', and 'z' fields are per-coordinate parameters. Note that coordinates represent an offset from the input position, not an absolute position. Coordinates may be a single value, a random distribution, or molang expression that resolves to a numeric value. The 'coordinate_eval_order' field is provided for finer control of coordinate resolution (particularly when using the 'grid' distribution). 'iterations' controls how many individual placements should occur if the 'scatter_chance' check succeeds. The 'scatter_chance' check happens once, so either all placements will run or none will.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"iterations": {
					"description": "Number of scattered positions to generate.",
					"type": "integer"
				},
				"project_input_to_floor": {
					"description": "If true, snaps the y-value of the scattered position to the terrain heightmap. If false or unset, y-value is unmodified.",
					"type": "boolean"
				},
				"coordinate_eval_order": {
					"description": "The order in which coordinates will be evaluated. Should be used when a coordinate depends on another. If omitted, defaults to 'xzy'.",
					"$ref": "../general.json#/definitions/coordinate_eval_order"
				},
				"scatter_chance": {
					"anyOf": [
						{
							"description": "Probability (0-100] that this scatter will occur.  Not evaluated each iteration; either no iterations will run, or all will.",
							"type": "string"
						},
						{
							"description": "Probability numerator / denominator that this scatter will occur.  Not evaluated each iteration; either no iterations will run, or all will.",
							"$ref": "../general.json#/definitions/chance_information"
						}
					]
				},
				"x": {
					"anyOf": [
						{
							"description": "Expression for the coordinate (evaluated each iteration).",
							"type": "string"
						},
						{
							"description": "Distribution for the coordinate (evaluated each iteration).",
							"properties": {
								"extent": {
									"minItems": 2,
									"maxItems": 2,
									"type": "array",
									"items": [
										{
											"description": "Lower bound (inclusive) of the scatter range, as an offset from the input point to scatter around.",
											"anyOf": [
												{
													"type": "number"
												},
												{
													"type": "string"
												}
											]
										},
										{
											"description": "Upper bound (inclusive) of the scatter range, as an offset from the input point to scatter around.",
											"anyOf": [
												{
													"type": "number"
												},
												{
													"type": "string"
												}
											]
										}
									]
								},
								"distribution": {
									"description": "Type of distribution - uniform random, gaussian (centered in the range), or grid (either fixed-step or jittered).",
									"$ref": "../general.json#/definitions/distributions"
								},
								"step_size": {
									"type": "integer",
									"description": "When the distribution type is grid, defines the distance between steps along this axis."
								},
								"grid_offset": {
									"type": "integer",
									"description": "When the distribution type is grid, defines the offset along this axis."
								}
							}
						}
					]
				},
				"y": {
					"$ref": "#/properties/minecraft:scatter_feature/properties/x"
				},
				"z": {
					"$ref": "#/properties/minecraft:scatter_feature/properties/x"
				},
				"places_feature": {
					"description": "Named reference of feature to be placed.",
					"type": "array",
					"items": {
						"$ref": "../../general/reference/feature.json"
					}
				}
			}
		},
		"minecraft:search_feature": {
			"description": "Sweeps a volume searching for a valid placement location for its referenced feature. The 'search_volume' field specifies the axis-aligned bounding box that defines the boundaries of the search. The search sweeps along the axis defined by the 'search_axis' field, layer by layer. For example, if 'search_axis' = '-x', blocks with greater x values will be checked before blocks with lower x values. Each layer is searched from the bottom-left to the top-right before moving to the next layer along the axis. By default, only one valid position must be found, but this can be altered by specifying the 'required_successes' field. If fewer than the required successes are found, no placement will occur.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"places_feature": {
					"description": "Named reference of feature to be placed.",
					"$ref": "../../general/reference/feature.json"
				},
				"search_volume": {
					"description": "Axis-aligned bounding box that will be searched for valid placement positions. Expressed as offsets from the input position.",
					"additionalProperties": false,
					"properties": {
						"min": {
							"description": "Minimum extent of the bounding volume expressed as [ x, y, z ].",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"type": "number"
							}
						},
						"max": {
							"description": "Maxium extent of the bounding volume expressed as [ x, y, z ].",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"type": "number"
							}
						}
					}
				},
				"search_axis": {
					"description": "Axis that the search will sweep along through the 'search_volume'.",
					"type": "string",
					"enum": ["-x", "+x", "-y", "+y", "-z", "+z"]
				},
				"required_successes": {
					"description": "Number of valid positions the search must find in order to place the referenced feature.",
					"type": "number"
				}
			}
		},
		"minecraft:single_block_feature": {
			"description": "Places a single block in the world. The 'may_place_on' and 'may_replace' fields are allowlists which specify where the block can be placed. If these fields are omitted, the block can be placed anywhere. The block's internal survivability and placement rules can optionally be enforced with the 'enforce_survivability_rules' and 'enforce_placement_rules' fields. These rules are specified per-block and are typically designed to produce high quality gameplay or natural behavior. However, enabling this enforcement may make it harder to debug placement failures.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"places_block": {
					"description": "Reference to the block to be placed.",
					"$ref": "../general.json#/definitions/block_reference"
				},
				"enforce_survivability_rules": {
					"description": " If true, enforce the block's canSurvive check.",
					"type": "boolean"
				},
				"enforce_placement_rules": {
					"description": "If true, enforce the block's canPlace check.",
					"type": "boolean"
				},
				"may_attach_to": {
					"additionalProperties": false,
					"properties": {
						"min_sides_must_attach": {
							"type": "integer",
							"enum": [1, 2, 3, 4]
						},
						"auto_rotate": {
							"description": "Automatically rotate the block to attach sensibly.",
							"type": "boolean"
						},
						"top": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"bottom": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"north": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"east": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"south": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"west": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"all": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						"sides": {
							"type": "array",
							"items": {
								"$ref": "../../general/reference/identifiers.json#/definitions/block_identifiers"
							}
						}
					}
				},
				"may_replace": {
					"description": "A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.",
					"type": "array",
					"items": {
						"$ref": "../general.json#/definitions/block_reference"
					}
				}
			}
		},
		"minecraft:structure_template_feature": {
			"description": "Places a structure in the world. The structure must be stored as a .mcstructure file in the 'structures' subdirectory of a behavior pack. It is possible to reference structures that are part of other behavior packs, they do not need to come from the same behavior pack as this feature. Constraints can be defined to specify where the structure is allowed to be placed. During placement, the feature will search for a position within the 'adjustment_radius' that satisfies all constraints. If none are found, the structure will not be placed.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"structure_name": {
					"description": "Reference to the structure to be placed.",
					"type": "string"
				},
				"adjustment_radius": {
					"description": "How far the structure is allowed to move when searching for a valid placement position. Search is radial, stopping when the nearest valid position is found. Defaults to 0 if omitted.",
					"type": "integer",
					"enum": [
						0,
						1,
						2,
						3,
						4,
						5,
						6,
						7,
						8,
						9,
						10,
						11,
						12,
						13,
						14,
						15,
						16
					]
				},
				"facing_direction": {
					"description": "Direction the structure will face when placed in the world. Defaults to 'random' if omitted.",
					"type": "string",
					"enum": ["north", "south", "east", "west", "random"]
				},
				"constraints": {
					"description": "Specific constraints that must be satisfied when placing this structure.",
					"additionalProperties": false,
					"properties": {
						"grounded": {
							"description": "When specified, ensures the structure is on the ground."
						},
						"unburied": {
							"description": "When specified, ensures the structure has air above it."
						},
						"block_intersection": {
							"description": " When specified, ensures the structure only intersects with allowlisted blocks.",
							"properties": {
								"block_allowlist": {
									"description": "List of blocks the owning structure is allowed to intersect with.",
									"type": "array",
									"items": {
										"$ref": "../general.json#/definitions/block_reference"
									}
								}
							}
						}
					}
				}
			}
		},
		"minecraft:tree_feature": {
			"allOf": [
				{
					"$ref": "../general.json#/definitions/branches_reference"
				},
				{
					"$ref": "../general.json#/definitions/canopy_reference"
				}
			],
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"base_cluster": {
					"additionalProperties": false,
					"properties": {
						"may_replace": {
							"type": "array",
							"items": {
								"$ref": "../general.json#/definitions/block_reference"
							}
						},
						"num_clusters": {
							"type": "number"
						},
						"cluster_radius": {
							"type": "number"
						}
					}
				},
				"may_grow_on": {
					"type": "array",
					"items": {
						"$ref": "../general.json#/definitions/block_reference"
					}
				},
				"may_grow_through": {
					"type": "array",
					"items": {
						"$ref": "../general.json#/definitions/block_reference"
					}
				},
				"may_replace": {
					"type": "array",
					"items": {
						"$ref": "../general.json#/definitions/block_reference"
					}
				},
				"acacia_trunk": {
					"additionalProperties": false,
					"properties": {
						"trunk_height": {
							"properties": {
								"range_min": {
									"type": "number"
								},
								"range_max": {
									"type": "number"
								}
							}
						},
						"trunk_width": {
							"type": "number"
						},
						"trunk_lean": {
							"additionalProperties": false,
							"properties": {
								"allow_diagonal_growth": {
									"type": "boolean"
								},
								"lean_height": {
									"type": "number"
								},
								"lean_steps": {
									"type": "number"
								}
							}
						},
						"trunk_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"trunk_decoration": {
							"additionalProperties": false,
							"properties": {
								"decoration_chance": {
									"$ref": "../general.json#/definitions/chance_information"
								},
								"block_reference": {
									"$ref": "../general.json#/definitions/block_reference"
								},
								"num_steps": {
									"type": "number"
								},
								"step_direction": {
									"type": "string",
									"enum": ["down", "up", "out", "away"]
								}
							}
						},
						"branches": {
							"$ref": "../general.json#/definitions/branches_reference"
						}
					}
				},
				"fallen_trunk": {
					"additionalProperties": false,
					"properties": {
						"stump_height": {
							"type": "integer"
						},
						"height_modifier": {
							"type": "number"
						},
						"log_length": {
							"type": "integer"
						},
						"trunk_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"log_decoration_feature": {
							"$ref": "../../general/reference/feature.json"
						},
						"trunk_decoration": {
							"additionalProperties": false,
							"properties": {
								"decoration_chance": {
									"$ref": "../general.json#/definitions/chance_information"
								},
								"block_reference": {
									"$ref": "../general.json#/definitions/block_reference"
								},
								"num_steps": {
									"type": "number"
								},
								"step_direction": {
									"type": "string",
									"enum": ["down", "up", "out", "away"]
								}
							}
						}
					}
				},
				"fancy_trunk": {
					"additionalProperties": false,
					"properties": {
						"trunk_height": {
							"additionalProperties": false,
							"properties": {
								"base": {
									"type": "integer"
								},
								"variance": {
									"type": "number"
								},
								"scale": {
									"type": "number"
								}
							}
						},
						"trunk_width": {
							"type": "integer"
						},
						"width_scale": {
							"type": "number"
						},
						"foliage_altitude_factor": {
							"type": "number"
						},
						"trunk_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"branches": {
							"additionalProperties": false,
							"properties": {
								"slope": {
									"type": "number"
								},
								"density": {
									"type": "number"
								},
								"min_alititude_factor": {
									"type": "number"
								}
							}
						}
					}
				},
				"mega_trunk": {
					"additionalProperties": false,
					"properties": {
						"trunk_height": {
							"additionalProperties": false,
							"properties": {
								"base": {
									"type": "number"
								},
								"intervals": {
									"type": "array",
									"minItems": 2,
									"maxItems": 2,
									"items": {
										"type": "number"
									}
								}
							}
						},
						"trunk_width": {
							"type": "number"
						},
						"trunk_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"trunk_decoration": {
							"additionalProperties": false,
							"properties": {
								"decoration_chance": {
									"$ref": "../general.json#/definitions/chance_information"
								},
								"block_reference": {
									"$ref": "../general.json#/definitions/block_reference"
								},
								"num_steps": {
									"type": "number"
								},
								"step_direction": {
									"type": "string",
									"enum": ["down", "up", "out", "away"]
								}
							}
						},
						"branches": {
							"$ref": "../general.json#/definitions/branches_reference"
						}
					}
				},
				"trunk": {
					"additionalProperties": false,
					"properties": {
						"can_be_submerged": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"properties": {
										"max_depth": {
											"type": "number"
										}
									}
								}
							]
						},
						"trunk_height": {
							"additionalProperties": false,
							"properties": {
								"range_min": {
									"type": "number"
								},
								"range_max": {
									"type": "number"
								}
							}
						},
						"base_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"trunk_width": {
							"type": "number"
						},
						"trunk_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"trunk_decoration": {
							"additionalProperties": false,
							"properties": {
								"decoration_chance": {
									"$ref": "../general.json#/definitions/chance_information"
								},
								"block_reference": {
									"$ref": "../general.json#/definitions/block_reference"
								},
								"num_steps": {
									"type": "number"
								},
								"step_direction": {
									"type": "string",
									"enum": ["down", "up", "out", "away"]
								}
							}
						}
					}
				}
			}
		},
		"minecraft:weighted_random_feature": {
			"description": "randomly selects and places a feature based on a weight value. Weights are relative, with higher values making selection more likely.",
			"additionalProperties": false,
			"properties": {
				"description": {
					"additionalProperties": false,
					"properties": {
						"identifier": {
							"$ref": "../../project/prefixedFileIdentifierEnum.json"
						}
					}
				},
				"early_out": {
					"$ref": "../general.json#/definitions/early_outs"
				},
				"features": {
					"description": "Collection of weighted features that placement will select from.",
					"type": "array",
					"items": {
						"type": "array",
						"minItems": 2,
						"maxItems": 2,
						"items": [
							{
								"description": "Named reference to a feature.",
								"$ref": "../../general/reference/feature.json"
							},
							{
								"description": "Weight used in random selection. Value is relative to other weights in the collection.",
								"type": "integer"
							}
						]
					}
				}
			}
		}
	}
}
