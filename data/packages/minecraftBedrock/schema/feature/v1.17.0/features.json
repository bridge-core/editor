{
	"$schema": "http://json-schema.org/draft-07/schema",
	"allOf": [
		{
			"$ref": "../v1.16.220/features.json"
		},
		{
			"properties": {
				"minecraft:geode_feature": {
					"description": "Generates a rock formation to simulate a geode. Each layer of, and block within, the geode can be replaced. Succeeds if: At least one block within the geode is placed.",
					"additionalProperties": false,
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"filler": {
							"description": "The block to fill the inside of the geode.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"inner_layer": {
							"description": "The block that forms the inside layer of the geode shell.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"alternate_inner_layer": {
							"description": "The block that has a chance of generating instead of inner_layer.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"middle_layer": {
							"description": "The block that forms the middle layer of the geode shell.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"outer_layer": {
							"description": "The block that forms the outer shell of the geode.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"inner_placements": {
							"description": "A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.",
							"type": "array",
							"items": {
								"$ref": "../general.json#/definitions/block_reference"
							}
						},
						"min_outer_wall_distance": {
							"description": "The minimum distance each distribution point must be from the outer wall.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"max_outer_wall_distance": {
							"description": "The maximum distance each distribution point can be from the outer wall.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"min_distribution_points": {
							"description": "The minimum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"max_distribution_points": {
							"description": "The maximum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"min_point_offset": {
							"description": "The lowest possible value of random offset applied to the position of each distribution point.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"max_point_offset": {
							"description": "The highest possible value of random offset applied to the position of each distribution point.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"max_radius": {
							"description": "The maximum possible radius of the geode generated.",
							"type": "integer"
						},
						"crack_point_offset": {
							"description": "An offset applied to each distribution point that forms the geode crack opening.",
							"type": "integer",
							"minimum": 1,
							"maximum": 10
						},
						"generate_crack_chance": {
							"description": "The likelihood of a geode generating with a crack in its shell.",
							"type": "number"
						},
						"base_crack_size": {
							"description": "How large the crack opening of the geode should be when generated.",
							"type": "number"
						},
						"noise_multiplier": {
							"description": "A multiplier applied to the noise that is applied to the distribution points within the geode. Higher = more noisy.",
							"type": "number"
						},
						"use_potential_placements_chance": {
							"description": "The likelihood that a special block will be placed on the inside of the geode.",
							"type": "number"
						},
						"use_alternative_layer0_chance": {
							"description": "The likelihood that a block in the innermost layer of the geode will be replaced with an alternate option.",
							"type": "number"
						},
						"placements_require_layer0_alternate": {
							"description": "If true, the potential placement block will only be placed on the alternate layer0 blocks that get placed. Potential placement blocks are blocks that depend on the existance of another block to be placed. The latter are the layer alternate blocks.",
							"type": "boolean"
						},
						"invalid_blocks_threshold": {
							"description": "The threshold of invalid blocks for a geode to have a distribution point in before it aborts generation entirely.",
							"type": "integer"
						}
					}
				},
				"minecraft:vegetation_patch_feature": {
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"replaceable_blocks": {
							"type": "array",
							"items": {
								"$ref": "../general.json#/definitions/block_reference"
							}
						},
						"ground_block": {
							"$ref": "../general.json#/definitions/block_reference"
						},
						"vegetation_feature": {
							"$ref": "../../general/reference/feature.json"
						},
						"surface": {
							"type": "string",
							"enum": ["floor", "ceiling"]
						},
						"depth": {
							"anyOf": [
								{
									"type": "number"
								},
								{
									"type": "object",
									"properties": {
										"range_min": {
											"type": "number"
										},
										"range_max": {
											"type": "number"
										}
									}
								}
							]
						},
						"extra_deep_block_chance": {
							"type": "number"
						},
						"vertical_range": {
							"type": "integer"
						},
						"vegetation_chance": {
							"type": "number"
						},
						"horizontal_radius": {
							"anyOf": [
								{
									"type": "number"
								},
								{
									"type": "object",
									"properties": {
										"range_min": {
											"type": "number"
										},
										"range_max": {
											"type": "number"
										}
									}
								}
							]
						},
						"extra_edge_column_chance": {
							"type": "number"
						},
						"waterlogged": {
							"type": "boolean"
						}
					}
				},
				"minecraft:multiface_feature": {
					"description": "Places one or a few multiface blocks on floors/walls/ceilings. Despite the name, any block can be placed by this feature. During placement, existing world blocks are checked to see if this feature can be placed on them based on the list provided in the 'can_place_on' field. If no 'can_replace_on' field is specified, the 'place_block' block can be placed on any existing block. This feature will also try to spread the 'place_block' block around the location in world the feature is placed.",
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"places_block": {
							"description": "Reference to the block to be placed.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"search_range": {
							"description": "How far, in blocks, this feature can search for a valid position to place.",
							"type": "integer"
						},
						"can_place_on_floor": {
							"description": "Can this feature be placed on the ground (top face of a block)?",
							"type": "boolean"
						},
						"can_place_on_ceiling": {
							"description": "Can this feature be placed on the ceiling (bottom face of a block)?",
							"type": "boolean"
						},
						"can_place_on_wall": {
							"description": "Can this feature be placed on the wall (side faces of a block)?",
							"type": "boolean"
						},
						"chance_of_spreading": {
							"description": "For each block placed by this feature, how likely will that block spread to another?",
							"type": "number"
						},
						"can_place_on": {
							"description": "A list of blocks that the block in this feature can be placed on. Omit this field to allow any block to be placed on.",
							"type": "array",
							"items": {
								"$ref": "../general.json#/definitions/block_reference"
							}
						}
					}
				},
				"minecraft:beards_and_shavers": {
					"description": "Will build a 'beard' or 'shave' out space so as to provide a clear space for a feature to place.",
					"additionalProperties": false,
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"places_feature": {
							"description": "Named reference of feature to be placed.",
							"$ref": "../../general/reference/feature.json"
						},
						"bounding_box_min": {
							"description": "Dimensions of the Bounding Box.",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"type": "number"
							}
						},
						"bounding_box_max": {
							"description": "Dimensions of the Bounding Box.",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"type": "number"
							}
						},
						"y_delta": {
							"description": "Y Delta for BAS.",
							"type": "number"
						},
						"surface_block_type": {
							"description": "Reference to the block to be placed.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"subsurface_block_type": {
							"description": "Reference to the block to be placed.",
							"$ref": "../general.json#/definitions/block_reference"
						},
						"beard_raggedness_min": {
							"description": "Y Delta for BAS.",
							"type": "number"
						},
						"beard_raggedness_max": {
							"description": "Y Delta for BAS.",
							"type": "number"
						}
					}
				},
				"minecraft:rect_layout": {
					"description": "Scans the surface of a Chunk, calling place() on the surface of each block column.",
					"additionalProperties": false,
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"ratio_of_empty_space": {
							"description": "Ratio of a Chunk to be filled with empty space rather than features.",
							"type": "number"
						},
						"feature_areas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"feature": {
										"description": "Feature to be placed.",
										"$ref": "../../general/reference/feature.json"
									},
									"area_dimensions": {
										"description": "Dimensions (size) of the associated Feature.",
										"type": "array",
										"minItems": 2,
										"maxItems": 2,
										"items": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				"minecraft:conditional_list": {
					"description": "Places the first suitable feature within a collection. These conditional features will be evaluated in order.",
					"additionalProperties": false,
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"conditional_features": {
							"description": "Array of Features, and their associated Conditions, for attempted placement. These features will be evaluated as ordered.",
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"places_feature": {
										"description": "Feature to be placed.",
										"$ref": "../../general/reference/feature.json"
									},
									"condition": {
										"description": "Condition for placing associated Feature.",
										"$ref": "../../molang/embeddedBeta.json"
									}
								}
							}
						},
						"early_out_scheme": {
							"description": "Denote whether placement should end on first successful placement or first passed condition.",
							"type": "string",
							"enum": ["condition_success", "placement_success"]
						}
					}
				},
				"minecraft:scan_surface": {
					"description": "Scans the surface of a Chunk, calling place() on the surface of each block column.",
					"additionalProperties": false,
					"properties": {
						"description": {
							"additionalProperties": false,
							"properties": {
								"identifier": {
									"$ref": "../../project/prefixedFileIdentifierEnum.json"
								}
							}
						},
						"scan_surface_feature": {
							"description": "Named reference of feature to be placed.",
							"$ref": "../../general/reference/feature.json"
						}
					}
				}
			}
		}
	]
}
