{
	"$schema": "http://json-schema.org/draft-07/schema",
	"additionalProperties": false,
	"properties": {
		"minecraft:emitter_local_space": {
			"description": "This component specifies whether entity-based emitters simulate in local or global space",
			"additionalProperties": false,
			"properties": {
				"position": { "type": "boolean" },
				"rotation": { "type": "boolean" },
				"velocity": { "type": "boolean" }
			}
		},
		"minecraft:emitter_initialization": {
			"additionalProperties": false,
			"properties": {
				"creation_expression": {
					"description": "This is run once at emitter startup",
					"$ref": "../molang/embeddedBeta.json"
				},
				"per_update_expression": {
					"description": "This is run once per emitter update",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_rate_instant": {
			"description": "This many particles are emitted at once. Evaluated once per particle emitter loop",
			"additionalProperties": false,
			"properties": {
				"num_particles": {
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_rate_steady": {
			"additionalProperties": false,
			"properties": {
				"spawn_rate": {
					"description": "How often a particle is emitted, in particles/sec. Evaluated once per particle emitted",
					"$ref": "../molang/embeddedBeta.json"
				},
				"max_particles": {
					"description": "Maximum number of particles that can be active at once for this emitter. Evaluated once per particle emitter loop",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_rate_manual": {
			"additionalProperties": false,
			"properties": {
				"max_particles": {
					"description": "Evaluated once per particle emitted",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_lifetime_looping": {
			"additionalProperties": false,
			"properties": {
				"active_time": {
					"description": "Emitter will emit particles for this time per loop. Evaluated once per particle emitter loop",
					"$ref": "../molang/embeddedBeta.json"
				},
				"sleep_time": {
					"description": "Emitter will pause emitting particles for this time per loop. Evaluated once per particle emitter loop",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_lifetime_once": {
			"additionalProperties": false,
			"properties": {
				"active_time": {
					"description": "How long the particles emit for evaluated once",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_lifetime_expression": {
			"additionalProperties": false,
			"properties": {
				"activation_expression": {
					"description": "When the expression is non-zero, the emitter will emit particles. Evaluated every frame",
					"$ref": "../molang/embeddedBeta.json"
				},
				"expiration_expression": {
					"description": "Emitter will expire if the expression is non-zero. Evaluated every frame",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:emitter_lifetime_events": {
			"additionalProperties": false,
			"properties": {
				"creation_event": {
					"description": "Fires when the emitter is created",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"expiration_event": {
					"description": "Fires when the emitter expires (does not wait for particles to expire too)",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"timeline": {
					"additionalProperties": false,
					"description": "A series of times, e.g. 0.0 or 1.0, that trigger the event these get fired on every loop the emitter goes through",
					"properties": {
						"time": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"travel_distance_events": {
					"additionalProperties": false,
					"description": "A series of distances, e.g. 0.0 or 1.0, that trigger the event. These get fired when the emitter has moved by the specified input ",
					"properties": {
						"distance": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"looping_travel_distance_events": {
					"type": "array",
					"description": "A series of events that occur at set intervals. These get fired every time the emitter has moved the specified input distance from the last time it was fired.",
					"items": {
						"properties": {
							"distance": {
								"type": "number"
							},
							"effects": {
								"description": "This effect must be defined events within the particle_effect",
								"type": "string"
							}
						}
					}
				}
			}
		},
		"minecraft:emitter_shape_point": {
			"additionalProperties": false,
			"properties": {
				"offset": {
					"description": "Specifies the offset from the emitter to emit the particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"description": "Specifies the direciton of particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				}
			}
		},
		"minecraft:emitter_shape_sphere": {
			"additionalProperties": false,
			"properties": {
				"radius": {
					"description": "Sphere radius. Evaluated once per particle emitted",
					"$ref": "../molang/embeddedBeta.json"
				},
				"surface_only": {
					"description": "Emit only from the surface of the sphere",
					"type": "boolean"
				},
				"offset": {
					"description": "Specifies the offset from the emitter to emit the particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"description": "Specifies the direction of particles.  Defaults to 'outwards'",
					"anyOf": [
						{
							"type": "string",
							"description": "'inwards' - Particle direction towards center of the sphere. 'outwards' - Particle direction away from center of the sphere",
							"enum": ["outwards", "inwards"]
						},
						{
							"description": "Evaluated once per particle emitted",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					]
				}
			}
		},
		"minecraft:emitter_shape_box": {
			"additionalProperties": false,
			"properties": {
				"half_dimensions": {
					"description": "Box dimensions. these are the half dimensions, the box is formed centered on the emitter with the box extending in the 3 principal x/y/z axes by these values",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"surface_only": {
					"description": "Emit only from the surface of the sphere",
					"type": "boolean"
				},
				"offset": {
					"description": "Specifies the offset from the emitter to emit the particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"anyOf": [
						{
							"description": "'inwards' - Particle direction towards center of the cube. 'outwards' - Particle direction away from center of the cube",
							"type": "string",
							"examples": ["outwards", "inwards"]
						},
						{
							"description": "Evaluated once per particle emitted",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					]
				}
			}
		},
		"minecraft:emitter_shape_custom": {
			"additionalProperties": false,
			"properties": {
				"offset": {
					"description": "Specifies the offset from the emitter to emit the particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"description": "Specifies the direciton for the particle. Evaluated once per particle emitted",
					"anyOf": [
						{
							"description": "'inwards' - Particle direction towards center. 'outwards' - Particle direction away from center",
							"type": "string",
							"examples": ["outwards", "inwards"]
						},
						{
							"description": "Evaluated once per particle emitted",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					]
				}
			}
		},
		"minecraft:emitter_shape_entity_aabb": {
			"additionalProperties": false,
			"properties": {
				"surface_only": {
					"description": "Emit only from the surface of the sphere",
					"type": "boolean"
				},
				"direction": {
					"anyOf": [
						{
							"description": "'inwards' - Particle direction towards center. 'outwards' - Particle direction away from center",
							"type": "string",
							"examples": ["outwards", "inwards"]
						},
						{
							"description": "Evaluated once per particle emitted",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					]
				}
			}
		},
		"minecraft:emitter_shape_disc": {
			"additionalProperties": false,
			"properties": {
				"radius": {
					"description": "Disc radius. Evaluated once per particle emitted",
					"$ref": "../molang/embeddedBeta.json"
				},
				"plane_normal": {
					"description": "Specifies the normal of the disc plane, the disc will be perpendicular to this direction",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number"
							},
							{
								"enum": ["x", "y", "z"]
							}
						]
					}
				},
				"surface_only": {
					"description": "Emit only from the edge of the disc",
					"type": "boolean"
				},
				"offset": {
					"description": "Specifies the offset from the emitter to emit the particles. Evaluated once per particle emitted",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"anyOf": [
						{
							"description": "'inwards' - Particle direction towards center. 'outwards' - Particle direction away from center",
							"type": "string",
							"examples": ["outwards", "inwards"]
						},
						{
							"description": "Evaluated once per particle emitted",
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					]
				}
			}
		},
		"minecraft:particle_initial_spin": {
			"additionalProperties": false,
			"properties": {
				"rotation": {
					"description": "Specifies the initial rotation in degrees. Evaluated once",
					"$ref": "../molang/embeddedBeta.json"
				},
				"rotation_rate": {
					"description": "Specifies the spin rate in degrees/second. Evaluated once",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:particle_initial_speed": {
			"description": "Evaluated once",
			"anyOf": [
				{
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				{
					"$ref": "../molang/embeddedBeta.json"
				}
			]
		},
		"minecraft:particle_motion_dynamic": {
			"additionalProperties": false,
			"properties": {
				"linear_acceleration": {
					"description": "The linear acceleration applied to the particle, defaults to [0, 0, 0]. Units are blocks/sec/sec. An example would be gravity which is [0, -9.8, 0]. Evaluated every frame",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"linear_drag_coefficient": {
					"description": "Using the equation: acceleration = -linear_drag_coefficient*velocity where velocity is the current direction times speed. Think of this as air-drag. The higher the value, the more drag. Evaluated every frame",
					"$ref": "../molang/embeddedBeta.json"
				},
				"rotating_acceleration": {
					"description": "Acceleration applies to the rotation speed of the particle, think of a disc spinning up or a smoke puff that starts rotating but slows down over time. Evaluated every frame. Acceleration is in degrees/sec/sec",
					"$ref": "../molang/embeddedBeta.json"
				},
				"rotation_drag_coefficient": {
					"description": "Drag applied to retard rotation equation is rotation_acceleration += -rotation_rate*rotation_drag_coefficient. Useful to slow a rotation, or to limit the rotation acceleration. Think of a disc that speeds up (acceleration) but reaches a terminal speed (drag). Another use is if you have a particle growing in size, having the rotation slow down due to drag can add 'weight' to the particle's motion",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:particle_motion_parametric": {
			"additionalProperties": false,
			"properties": {
				"relative_position": {
					"description": "Directly set the position relative to the emitter. Evaluated every frame",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"direction": {
					"description": "Directly set the 3d direction of the particle. Doesn't affect direction if not specified. Evaluated every frame",
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"rotation": {
					"description": "Directly set the rotation of the particle. Evaluated every frame",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:particle_motion_collision": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "Enables motion collision on the particle. Evaluates every frame",
					"$ref": "../molang/embeddedBeta.json"
				},
				"expire_on_contact": {
					"description": "Triggers expiration on contact if true",
					"type": "boolean"
				},
				"collision_drag": {
					"description": "Alters the speed of the particle when it has collided useful for emulating friction/drag when colliding, e.g a particle that hits the ground would slow to a stop. This drag slows down the particle by this amount in blocks/sec when in contact",
					"type": "number"
				},
				"coefficient_of_restitution": {
					"type": "number",
					"description": "Used for bouncing/not-bouncing. Set to 0.0 to not bounce, 1.0 to bounce back up to original hight and in-between to lose speed after bouncing.  Set to >1.0 to gain energy on each bounce"
				},
				"collision_radius": {
					"description": "Used to minimize interpenetration of particles with the environment, note that this must be less than or equal to 1/2 block",
					"type": "number"
				},
				"events": {
					"type": "array",
					"items": {
						"additionalProperties": false,
						"properties": {
							"event": {
								"description": "Triggers the specified event if the conditions are met",
								"type": "string"
							},
							"min_speed": {
								"description": "Optional minimum speed for event triggering",
								"type": "number"
							}
						}
					}
				}
			}
		},
		"minecraft:particle_appearance_billboard": {
			"additionalProperties": false,
			"properties": {
				"size": {
					"description": "Specifies the x/y size of the billboard evaluated every frame",
					"type": "array",
					"minItems": 2,
					"maxItems": 2,
					"items": {
						"$ref": "../molang/embeddedBeta.json"
					}
				},
				"facing_camera_mode": {
					"description": "Used to orient the billboard",
					"type": "string",
					"enum": [
						"rotate_xyz",
						"rotate_y",
						"lookat_xyz",
						"lookat_y",
						"direction_x",
						"direction_y",
						"direction_z",
						"emitter_transform_xy",
						"emitter_transform_xz",
						"emitter_transform_yz"
					]
				},
				"direction": {
					"description": "Specifies how to calculate the direction of a particle, this will be used by facing modes that require a direction as input (for instance: lookat_direction and direction)",
					"additionalProperties": false,
					"properties": {
						"mode": {
							"type": "string",
							"enum": ["derive_from_velocity", "custom_direction"]
						},
						"min_speed_threshold": {
							"description": "only used in 'derive_from_velocity' mode. The direction is set if the speed of the particle is above the threshold. The default is 0.01",
							"type": "number"
						},
						"custom_direction": {
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						}
					}
				},
				"uv": {
					"description": "Specifies the UVs for the particle",
					"additionalProperties": false,
					"properties": {
						"texture_height": {
							"type": "number"
						},
						"texture_width": {
							"type": "number"
						},
						"uv": {
							"description": "Assuming the specified texture width and height, use theseAssuming the specified texture width and height, use these uv coordinates.   uv coordinates.  ",
							"type": "array",
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						},
						"uv_size": {
							"type": "array",
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"$ref": "../molang/embeddedBeta.json"
							}
						},
						"flipbook": {
							"description": "A flipbook animation uses pieces of the texture to animate, by stepping over time from one 'frame' to another",
							"additionalProperties": false,
							"properties": {
								"base_UV": {
									"type": "array",
									"minItems": 2,
									"maxItems": 2,
									"items": {
										"$ref": "../molang/embeddedBeta.json"
									}
								},
								"size_UV": {
									"type": "array",
									"minItems": 2,
									"maxItems": 2,
									"items": {
										"type": "number"
									}
								},
								"step_UV": {
									"type": "array",
									"minItems": 2,
									"maxItems": 2,
									"items": {
										"type": "number"
									}
								},
								"frames_per_second": {
									"type": "number"
								},
								"max_frame": {
									"$ref": "../molang/embeddedBeta.json"
								},
								"stretch_to_lifetime": {
									"description": "Optional, adjust fps to match lifetime of particle. default=false",
									"type": "boolean"
								},
								"loop": {
									"description": "Optional, makes the animation loop when it reaches the end",
									"type": "boolean"
								}
							}
						}
					}
				}
			}
		},
		"minecraft:particle_appearance_tinting": {
			"additionalProperties": false,
			"properties": {
				"color": {
					"description": "Interpolation based color",
					"additionalProperties": false,
					"properties": {
						"gradient": {
							"anyOf": [
								{
									"type": "number"
								},
								{
									"type": "array",
									"minItems": 2,
									"maxItems": 2,
									"items": {
										"type": "array",
										"minItems": 4,
										"maxItems": 4,
										"items": {
											"$ref": "../molang/embeddedBeta.json"
										}
									}
								}
							]
						},
						"interpolant": {
							"$ref": "../molang/embeddedBeta.json"
						}
					}
				}
			}
		},
		"minecraft:particle_appearance_lighting": {
			"additionalProperties": false
		},
		"minecraft:particle_lifetime_expression": {
			"additionalProperties": false,
			"properties": {
				"expiration_expression": {
					"description": "This expression makes the particle expire when true (non-zero). The float/expr is evaluated once per particle. Evaluated every frame",
					"$ref": "../molang/embeddedBeta.json"
				},
				"max_lifetime": {
					"description": "Alternate way to express lifetime particle will expire after this much time. Evaluated once",
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		},
		"minecraft:particle_lifetime_events": {
			"additionalProperties": false,
			"properties": {
				"creation_event": {
					"description": "Fires when the particle is created",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"expiration_event": {
					"description": "Fires when the particle expires (does not wait for particles to expire too)",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"timeline": {
					"additionalProperties": false,
					"patternProperties": {
						"^[0-9]*$": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"minecraft:particle_expire_if_in_blocks": {
			"description": "Expiration triggers if the particle enters these blocks",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"minecraft:particle_expire_if_not_in_blocks": {
			"description": "Expiration triggers if the particle isn't in these blocks",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"minecraft:particle_kill_plane": {
			"description": "A*x + B*y + C*z + D = 0 with the parameters being [ A, B, C, D ]",
			"type": "array",
			"minItems": 4,
			"maxItems": 4,
			"items": {
				"type": "number"
			}
		},
		"minecraft:particle_initialization": {
			"additionalProperties": false,
			"properties": {
				"per_update_expression": {
					"$ref": "../molang/embeddedBeta.json"
				},
				"per_render_expression": {
					"$ref": "../molang/embeddedBeta.json"
				}
			}
		}
	}
}
